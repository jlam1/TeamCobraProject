package Room;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import Character.Monster;
import Character.MonsterGenerator;
import Item.Item;
import Item.ItemGenerator;
import Puzzle.Puzzle;
import Puzzle.PuzzleGenerator;

/**
 * 
 * This class is responsible for setting items, monsters, and puzzles in each
 * individual room. Each room is then added to an ArrayList<Room> Takes
 * ArrayList<Monster> from MonsterGenerator; Takes ArrayList<Item> from
 * ItemGenerator; Takes ArrayList<Puzzle> from PuzzleGenerator;
 * 
 * @author John
 *
 */
public class RoomFactory implements Serializable {
	private static final long serialVersionUID = 7894271087328509321L;
	// new ArrayList to put new objects into
	private ArrayList<Room> roomFactoryList = new ArrayList<Room>();
	private ArrayList<Room> roomList;

	/**
	 * The following method sets roomList equal to the roomList generated by the
	 * RoomGenerator.
	 */
	public RoomFactory() {
		roomList = new RoomGenerator().getRoomList();
	}

	/**
	 * The following method populates a monsterList using MonsterGenerator and
	 * then uses this monsterList to set a monster to each room in the roomList.
	 * 
	 * @return Void: Populates lists and sets monsters
	 */
	private void generateRoomMonster() {
		ArrayList<Monster> monsterList = new MonsterGenerator().getMonsterList();

		Room room;
		int roomID;

		for (int i = 0; i < roomList.size(); i++) {

			room = roomList.get(i);
			roomID = room.getId();

			// puzzler add to room 1-9
			if (roomID == 8) {
				room.setRoomMonster(monsterList.get(0));
				roomFactoryList.add(room);
			}
			// pogo add to room 2-9
			else if (roomID == 18) {
				room.setRoomMonster(monsterList.get(1));
				roomFactoryList.add(room);
			}
			// giant bull shark add to room 3-7
			else if (roomID == 25) {
				room.setRoomMonster(monsterList.get(2));
				roomFactoryList.add(room);
			}
			// sentry robot add to room 3-10
			else if (roomID == 28) {
				room.setRoomMonster(monsterList.get(3));
				roomFactoryList.add(room);
			}
			// quinn har add to room 4-12
			else if (roomID == 40) {
				room.setRoomMonster(monsterList.get(4));
				roomFactoryList.add(room);
			}
			// joe ker add to room 4-13
			else if (roomID == 41) {
				room.setRoomMonster(monsterList.get(5));
				roomFactoryList.add(room);
			}
			// floor 2 add all hula hooper
			else if (roomID >= 10 && roomID <= 17) {
				room.setRoomMonster(monsterList.get(6));
				roomFactoryList.add(room);
			}
			// floor 3 and 4 add wild hyena
			else if (roomID >= 21 && roomID <= 41 && roomID != 38 && roomID != 40) {
				room.setRoomMonster(monsterList.get(7));
				roomFactoryList.add(room);
			} else {
				room.setRoomMonster(null);
				roomFactoryList.add(room);
			}
		}

	}

	/**
	 * The following method populates a puzzleList using PuzzleGenerator and
	 * then uses this puzzleList to set a puzzle to each room in the roomList.
	 * 
	 * @return Void: Populates lists and sets puzzles
	 */
	private void generateRoomPuzzle() {
		ArrayList<Puzzle> puzzleList = new PuzzleGenerator().getPuzzleList();

		Room room;
		int roomID;

		for (int i = 0; i < roomList.size(); i++) {

			room = roomList.get(i);
			roomID = room.getId();

			// room 1-4 add blood puzzle
			if (roomID == 4) {
				room.setRoomPuzzle(puzzleList.get(0));
				roomFactoryList.add(room);
			}
			// room 1-9 add painting puzzle
			else if (roomID == 9) {
				room.setRoomPuzzle(puzzleList.get(1));
				roomFactoryList.add(room);
			}
			// room 2-3 add statues puzzle
			else if (roomID == 12) {
				room.setRoomPuzzle(puzzleList.get(2));
				roomFactoryList.add(room);
			}
			// room 2-2 add laser puzzle
			else if (roomID == 14) {
				room.setRoomPuzzle(puzzleList.get(3));
				roomFactoryList.add(room);
			}
			// room 2-7 add colored button puzzle
			else if (roomID == 16) {
				room.setRoomPuzzle(puzzleList.get(4));
				roomFactoryList.add(room);
			}
			// room 3-3 add security bypass puzzle
			else if (roomID == 21) {
				room.setRoomPuzzle(puzzleList.get(6));
				roomFactoryList.add(room);
			}
			// room 3-9 add jump the chasm puzzle
			else if (roomID == 28) {
				room.setRoomPuzzle(puzzleList.get(5));
				roomFactoryList.add(room);
			}
			// room 4-5 add riddle 1 puzzle
			else if (roomID == 33) {
				room.setRoomPuzzle(puzzleList.get(7));
				roomFactoryList.add(room);
			}
			// room 4-10 add riddle 2 puzzle
			else if (roomID == 38) {
				room.setRoomPuzzle(puzzleList.get(8));
				roomFactoryList.add(room);
			} else {
				room.setRoomPuzzle(null);
				roomFactoryList.add(room);
			}
		}
	}

	/**
	 * The following method populates an itemList using ItemGenerator and then
	 * uses this itemList to set a specific item to each room in the roomList
	 * that contains an item.
	 * 
	 * @return Void: Populates lists and sets items
	 * 
	 */
	private void generateRoomItem() {
		ArrayList<Item> itemList = new ItemGenerator().getItemList();

		Room room;
		int roomID;

		for (int i = 0; i < roomList.size(); i++) {

			room = roomList.get(i);
			roomID = room.getId();

			if (roomID == 16) {
				room.setRoomItem(itemList.get(1)); // chain mail
				roomFactoryList.add(room);
			} else if (roomID == 11 || roomID == 17) {
				room.setRoomItem(itemList.get(4)); // adrenaline shot
				roomFactoryList.add(room);
			} else if (roomID == 21) {
				room.setRoomItem(itemList.get(3));
				roomFactoryList.add(room);

			} else {
				room.setRoomItem(null);
				roomFactoryList.add(room);
			}
		}

	}

	/**
	 * The following method connects the exits to each room
	 * 
	 * @return Void: Sets Exits
	 */
	private void connectRooms() {
		// N E S W
		// connect floor 1, 10 rooms
		searchRoom(0).setExits(null, searchRoom(1), null, null); // 1-0
		searchRoom(1).setExits(null, searchRoom(2), null, searchRoom(0)); // 1-1
		searchRoom(2).setExits(null, searchRoom(3), null, searchRoom(1)); // 1-2
		searchRoom(3).setExits(null, searchRoom(4), null, searchRoom(2)); // 1-3
		searchRoom(4).setExits(null, null, searchRoom(5), searchRoom(3)); // 1-4
		searchRoom(5).setExits(searchRoom(4), searchRoom(9), null, searchRoom(6)); // 1-5
		searchRoom(6).setExits(null, searchRoom(5), null, searchRoom(7)); // 1-6
		searchRoom(7).setExits(null, searchRoom(6), null, searchRoom(8)); // 1-7
		searchRoom(8).setExits(null, searchRoom(7), null, searchRoom(10)); // 1-8
		searchRoom(9).setExits(null, null, null, searchRoom(5)); // 1-9

		// connect floor 2, 9 rooms
		searchRoom(10).setExits(null, searchRoom(11), null, searchRoom(8)); // 2-1
		searchRoom(11).setExits(searchRoom(12), searchRoom(14), searchRoom(13), searchRoom(10)); // 2-2
		searchRoom(12).setExits(null, null, searchRoom(11), null); // 2-3
		searchRoom(13).setExits(searchRoom(11), null, null, null); // 2-4
		searchRoom(14).setExits(null, searchRoom(15), null, searchRoom(11)); // 2-5
		searchRoom(15).setExits(searchRoom(16), searchRoom(18), searchRoom(17), searchRoom(14)); // 2-6
		searchRoom(16).setExits(null, null, searchRoom(15), null); // 2-7
		searchRoom(17).setExits(searchRoom(15), null, null, null); // 2-8
		searchRoom(18).setExits(null, searchRoom(19), null, searchRoom(15)); // 2-9

		// connect floor 3, 10 rooms
		searchRoom(19).setExits(null, searchRoom(20), searchRoom(28), searchRoom(18)); // 3-1
		searchRoom(20).setExits(null, searchRoom(22), searchRoom(21), searchRoom(19)); // 3-2
		searchRoom(21).setExits(searchRoom(20), searchRoom(26), null, null); // 3-3
		searchRoom(22).setExits(searchRoom(23), null, searchRoom(24), searchRoom(20)); // 3-4
		searchRoom(23).setExits(null, searchRoom(26), searchRoom(25), searchRoom(22)); // 3-5
		searchRoom(24).setExits(searchRoom(25), searchRoom(26), null, searchRoom(22)); // 3-6
		searchRoom(25).setExits(searchRoom(23), null, searchRoom(24), null); // 3-7
		searchRoom(26).setExits(searchRoom(23), searchRoom(27), searchRoom(24), searchRoom(21)); // 3-8
		searchRoom(27).setExits(null, searchRoom(28), null, searchRoom(26)); // 3-9
		searchRoom(28).setExits(null, searchRoom(29), searchRoom(19), searchRoom(27)); // 3-10

		// connect floor 4, 13 rooms
		searchRoom(29).setExits(null, searchRoom(30), null, searchRoom(28)); // 4-1
		searchRoom(30).setExits(null, searchRoom(31), null, searchRoom(29)); // 4-2
		searchRoom(31).setExits(null, searchRoom(32), null, searchRoom(30)); // 4-3
		searchRoom(32).setExits(null, searchRoom(33), null, searchRoom(31)); // 4-4
		searchRoom(33).setExits(null, null, searchRoom(34), searchRoom(32)); // 4-5
		searchRoom(34).setExits(searchRoom(33), null, searchRoom(37), searchRoom(35)); // 4-6
		searchRoom(35).setExits(null, searchRoom(34), null, searchRoom(36)); // 4-7
		searchRoom(36).setExits(null, searchRoom(35), null, null); // 4-8
		searchRoom(37).setExits(searchRoom(34), null, null, searchRoom(38)); // 4-9
		searchRoom(38).setExits(null, searchRoom(37), null, searchRoom(39)); // 4-10
		searchRoom(39).setExits(null, searchRoom(38), null, searchRoom(40)); // 4-11
		searchRoom(40).setExits(null, searchRoom(39), null, searchRoom(41)); // 4-12
		searchRoom(41).setExits(null, searchRoom(40), null, null); // 4-13

	}

	/**
	 * The following method generates all room types
	 */
	private void generateAllRooms() {
		generateRoomPuzzle();
		generateRoomMonster();
		generateRoomItem();
		connectRooms();
	}

	/**
	 * The following method returns an ordered list of connected, generated
	 * rooms.
	 * 
	 * @return roomFactoryList<Room>
	 */
	public ArrayList<Room> getRoomFactoryList() {
		generateAllRooms();
		Set<Room> factoryList = new HashSet<Room>(roomFactoryList);
		ArrayList<Room> newFactoryList = new ArrayList<Room>(factoryList);
		Collections.sort(newFactoryList);
		return newFactoryList;
	}

	/**
	 * The following method searches through ordered room list using specified
	 * parameter.
	 * 
	 * @param index
	 *            The only parameter for searchRoom().
	 * @return Room: The room specified by the parameter.
	 */
	private Room searchRoom(int index) {
		return roomFactoryList.get(index);
	}

}
